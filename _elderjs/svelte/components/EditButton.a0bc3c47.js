import { e as element, c as claim_element, a as children, d as detach_dev, b as attr_dev, f as add_location, i as insert_dev, g as append_dev, n as noop, h as dispatch_dev, v as validate_slots, S as SvelteComponentDev, j as init, s as safe_not_equal } from '../index-96466d9a.js';

/* src/components/EditButton.svelte generated by Svelte v3.29.7 */

const file = "src/components/EditButton.svelte";

function create_fragment(ctx) {
	let a;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			a = element("a");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, target: true });
			var a_nodes = children(a);
			img = claim_element(a_nodes, "IMG", { src: true, alt: true, class: true });
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = `${/*settingsPrefix*/ ctx[1]}/icons/pencil.svg`)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Edit");
			attr_dev(img, "class", "svelte-1iwf9gs");
			add_location(img, file, 14, 2, 331);
			attr_dev(a, "href", /*url*/ ctx[0]);
			attr_dev(a, "target", "_blank");
			add_location(a, file, 13, 0, 298);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, img);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*settingsPrefix*/ 2 && img.src !== (img_src_value = `${/*settingsPrefix*/ ctx[1]}/icons/pencil.svg`)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*url*/ 1) {
				attr_dev(a, "href", /*url*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("EditButton", slots, []);
	let { url } = $$props, { settingsPrefix } = $$props;
	const writable_props = ["url", "settingsPrefix"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<EditButton> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("url" in $$props) $$invalidate(0, url = $$props.url);
		if ("settingsPrefix" in $$props) $$invalidate(1, settingsPrefix = $$props.settingsPrefix);
	};

	$$self.$capture_state = () => ({ url, settingsPrefix });

	$$self.$inject_state = $$props => {
		if ("url" in $$props) $$invalidate(0, url = $$props.url);
		if ("settingsPrefix" in $$props) $$invalidate(1, settingsPrefix = $$props.settingsPrefix);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [url, settingsPrefix];
}

class EditButton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { url: 0, settingsPrefix: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "EditButton",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*url*/ ctx[0] === undefined && !("url" in props)) {
			console.warn("<EditButton> was created without expected prop 'url'");
		}

		if (/*settingsPrefix*/ ctx[1] === undefined && !("settingsPrefix" in props)) {
			console.warn("<EditButton> was created without expected prop 'settingsPrefix'");
		}
	}

	get url() {
		throw new Error("<EditButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<EditButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get settingsPrefix() {
		throw new Error("<EditButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set settingsPrefix(value) {
		throw new Error("<EditButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default EditButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWRpdEJ1dHRvbi5hMGJjM2M0Ny5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdEJ1dHRvbi5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgZXhwb3J0IGxldCB1cmwsIHNldHRpbmdzUHJlZml4XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICBpbWcge1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBoZWlnaHQ6IDIxcHg7XG4gICAgd2lkdGg6IDIxcHg7XG4gICAgZmlsdGVyOiBpbnZlcnQoMTAwJSkgc2VwaWEoMCUpIHNhdHVyYXRlKDc1MDAlKSBodWUtcm90YXRlKDI4MWRlZykgYnJpZ2h0bmVzcygxMTclKSBjb250cmFzdCg5OSUpO1xuICB9XG48L3N0eWxlPlxuXG48YSBocmVmPXt1cmx9IHRhcmdldD1cIl9ibGFua1wiPlxuICA8aW1nIHNyYz17YCR7c2V0dGluZ3NQcmVmaXh9L2ljb25zL3BlbmNpbC5zdmdgfSBhbHQ9XCJFZGl0XCIgLz5cbjwvYT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBEQWNlLEdBQWM7Ozs7K0JBRHBCLEdBQUc7Ozs7Ozs7OzswRkFDRyxHQUFjOzs7OztnQ0FEcEIsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BWkMsR0FBRyxnQkFBRSxjQUFjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=

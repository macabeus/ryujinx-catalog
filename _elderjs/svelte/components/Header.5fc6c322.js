import { e as element, k as space, t as text, c as claim_element, a as children, d as detach_dev, l as claim_space, m as claim_text, b as attr_dev, f as add_location, i as insert_dev, g as append_dev, n as noop, h as dispatch_dev, v as validate_slots, S as SvelteComponentDev, j as init, s as safe_not_equal } from '../index-96466d9a.js';

/* src/components/Header.svelte generated by Svelte v3.29.7 */

const file = "src/components/Header.svelte";

function create_fragment(ctx) {
	let header;
	let a;
	let img;
	let img_src_value;
	let t0;
	let h1;
	let t1;

	const block = {
		c: function create() {
			header = element("header");
			a = element("a");
			img = element("img");
			t0 = space();
			h1 = element("h1");
			t1 = text("Ryujinx - Compatibility Catalog");
			this.h();
		},
		l: function claim(nodes) {
			header = claim_element(nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			a = claim_element(header_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			img = claim_element(a_nodes, "IMG", { src: true, class: true, alt: true });
			a_nodes.forEach(detach_dev);
			t0 = claim_space(header_nodes);
			h1 = claim_element(header_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Ryujinx - Compatibility Catalog");
			h1_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = `${/*settingsPrefix*/ ctx[0]}/logo.png`)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "logo svelte-1pwpub");
			attr_dev(img, "alt", "Logo");
			add_location(img, file, 33, 4, 540);
			attr_dev(a, "href", /*settingsPrefix*/ ctx[0]);
			attr_dev(a, "class", "svelte-1pwpub");
			add_location(a, file, 32, 2, 510);
			attr_dev(h1, "class", "svelte-1pwpub");
			add_location(h1, file, 35, 2, 616);
			attr_dev(header, "class", "svelte-1pwpub");
			add_location(header, file, 31, 0, 499);
		},
		m: function mount(target, anchor) {
			insert_dev(target, header, anchor);
			append_dev(header, a);
			append_dev(a, img);
			append_dev(header, t0);
			append_dev(header, h1);
			append_dev(h1, t1);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*settingsPrefix*/ 1 && img.src !== (img_src_value = `${/*settingsPrefix*/ ctx[0]}/logo.png`)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*settingsPrefix*/ 1) {
				attr_dev(a, "href", /*settingsPrefix*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(header);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Header", slots, []);
	let { settingsPrefix } = $$props;
	const writable_props = ["settingsPrefix"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Header> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("settingsPrefix" in $$props) $$invalidate(0, settingsPrefix = $$props.settingsPrefix);
	};

	$$self.$capture_state = () => ({ settingsPrefix });

	$$self.$inject_state = $$props => {
		if ("settingsPrefix" in $$props) $$invalidate(0, settingsPrefix = $$props.settingsPrefix);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [settingsPrefix];
}

class Header extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { settingsPrefix: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Header",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*settingsPrefix*/ ctx[0] === undefined && !("settingsPrefix" in props)) {
			console.warn("<Header> was created without expected prop 'settingsPrefix'");
		}
	}

	get settingsPrefix() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set settingsPrefix(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Header;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGVhZGVyLjVmYzZjMzIyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9IZWFkZXIuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGV4cG9ydCBsZXQgc2V0dGluZ3NQcmVmaXhcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIGhlYWRlciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJveC1zaGFkb3c6IDAgLjVyZW0gMXJlbSByZ2JhKDAsIDAsIDAsIC4xNSk7XG4gIH1cblxuICBoZWFkZXIgPiAqIHtcbiAgICBwYWRkaW5nOiAwIDAgMCAxLjVyZW07XG4gIH1cblxuICAubG9nbyB7XG4gICAgaGVpZ2h0OiAzMHB4O1xuICAgIHdpZHRoOiAzMHB4O1xuICB9XG5cbiAgaDEge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgICBwYWRkaW5nLXRvcDogMXJlbTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMXJlbTtcbiAgICBtYXJnaW4tdG9wOiAwO1xuICAgIG1hcmdpbi1ib3R0b206IDA7XG4gIH1cbjwvc3R5bGU+XG5cbjxoZWFkZXI+XG4gIDxhIGhyZWY9e3NldHRpbmdzUHJlZml4fT5cbiAgICA8aW1nIHNyYz17YCR7c2V0dGluZ3NQcmVmaXh9L2xvZ28ucG5nYH0gY2xhc3M9XCJsb2dvXCIgYWx0PVwiTG9nb1wiIC8+XG4gIDwvYT5cbiAgPGgxPlJ5dWppbnggLSBDb21wYXRpYmlsaXR5IENhdGFsb2c8L2gxPlxuPC9oZWFkZXI+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MERBaUNpQixHQUFjOzs7OzBDQURwQixHQUFjOzs7Ozs7Ozs7Ozs7Ozs7OzswRkFDUixHQUFjOzs7OzsyQ0FEcEIsR0FBYzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BL0JaLGNBQWM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=

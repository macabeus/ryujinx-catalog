import { e as element, k as space, J as create_component, c as claim_element, a as children, d as detach_dev, l as claim_space, K as claim_component, b as attr_dev, f as add_location, i as insert_dev, g as append_dev, L as mount_component, q as transition_in, r as transition_out, M as destroy_component, h as dispatch_dev, v as validate_slots, S as SvelteComponentDev, j as init, s as safe_not_equal } from '../index-96466d9a.js';
import '../tagsFilter-23b6c8d4.js';
import './Tag.4a56e822.js';
import Tags from './Tags.7fe25aaf.js';

/* src/components/GameTeaser.svelte generated by Svelte v3.29.7 */
const file = "src/components/GameTeaser.svelte";

function create_fragment(ctx) {
	let div1;
	let div0;
	let img0;
	let img0_src_value;
	let t0;
	let a;
	let img1;
	let img1_src_value;
	let a_href_value;
	let t1;
	let tags;
	let div1_style_value;
	let current;

	tags = new Tags({
			props: { tags: /*game*/ ctx[0].tags },
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			img0 = element("img");
			t0 = space();
			a = element("a");
			img1 = element("img");
			t1 = space();
			create_component(tags.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			img0 = claim_element(div0_nodes, "IMG", {
				class: true,
				src: true,
				alt: true,
				referrerPolicy: true
			});

			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div1_nodes);
			a = claim_element(div1_nodes, "A", { href: true });
			var a_nodes = children(a);

			img1 = claim_element(a_nodes, "IMG", {
				class: true,
				src: true,
				alt: true,
				referrerPolicy: true
			});

			a_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			claim_component(tags.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img0, "class", "entry-background-image svelte-qlu1g5");
			if (img0.src !== (img0_src_value = /*game*/ ctx[0].squareImage)) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "alt", "Game Background");
			attr_dev(img0, "referrerpolicy", "no-referrer");
			add_location(img0, file, 63, 4, 1187);
			attr_dev(div0, "class", "entry-background svelte-qlu1g5");
			add_location(div0, file, 62, 2, 1152);
			attr_dev(img1, "class", "square-image svelte-qlu1g5");
			if (img1.src !== (img1_src_value = /*game*/ ctx[0].squareImage)) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", "Game");
			attr_dev(img1, "referrerpolicy", "no-referrer");
			add_location(img1, file, 67, 4, 1342);
			attr_dev(a, "href", a_href_value = /*game*/ ctx[0].permalink);
			add_location(a, file, 66, 2, 1312);
			attr_dev(div1, "class", "entry svelte-qlu1g5");
			attr_dev(div1, "style", div1_style_value = `--border-color: ${/*borderColor*/ ctx[1]}`);
			add_location(div1, file, 61, 0, 1089);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, img0);
			append_dev(div1, t0);
			append_dev(div1, a);
			append_dev(a, img1);
			append_dev(div1, t1);
			mount_component(tags, div1, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*game*/ 1 && img0.src !== (img0_src_value = /*game*/ ctx[0].squareImage)) {
				attr_dev(img0, "src", img0_src_value);
			}

			if (!current || dirty & /*game*/ 1 && img1.src !== (img1_src_value = /*game*/ ctx[0].squareImage)) {
				attr_dev(img1, "src", img1_src_value);
			}

			if (!current || dirty & /*game*/ 1 && a_href_value !== (a_href_value = /*game*/ ctx[0].permalink)) {
				attr_dev(a, "href", a_href_value);
			}

			const tags_changes = {};
			if (dirty & /*game*/ 1) tags_changes.tags = /*game*/ ctx[0].tags;
			tags.$set(tags_changes);

			if (!current || dirty & /*borderColor*/ 2 && div1_style_value !== (div1_style_value = `--border-color: ${/*borderColor*/ ctx[1]}`)) {
				attr_dev(div1, "style", div1_style_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tags.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tags.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(tags);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("GameTeaser", slots, []);
	let { game } = $$props;

	const borderColors = {
		crash: "tomato",
		playable: "rgb(13, 222, 156)",
		other: "rgb(201, 209, 161)"
	};

	let borderColor;
	const writable_props = ["game"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<GameTeaser> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("game" in $$props) $$invalidate(0, game = $$props.game);
	};

	$$self.$capture_state = () => ({ Tags, game, borderColors, borderColor });

	$$self.$inject_state = $$props => {
		if ("game" in $$props) $$invalidate(0, game = $$props.game);
		if ("borderColor" in $$props) $$invalidate(1, borderColor = $$props.borderColor);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*game*/ 1) {
			$: $$invalidate(1, borderColor = game.tags.includes("playable")
			? borderColors.playable
			: game.tags.includes("crash")
				? borderColors.crash
				: borderColors.other);
		}
	};

	return [game, borderColor];
}

class GameTeaser extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { game: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "GameTeaser",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*game*/ ctx[0] === undefined && !("game" in props)) {
			console.warn("<GameTeaser> was created without expected prop 'game'");
		}
	}

	get game() {
		throw new Error("<GameTeaser>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set game(value) {
		throw new Error("<GameTeaser>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default GameTeaser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2FtZVRlYXNlci5hMDA3NzNmNi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvR2FtZVRlYXNlci5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IFRhZ3MgZnJvbSAnLi9UYWdzLnN2ZWx0ZSdcblxuICBleHBvcnQgbGV0IGdhbWVcblxuICBjb25zdCBib3JkZXJDb2xvcnMgPSB7XG4gICAgY3Jhc2g6ICd0b21hdG8nLFxuICAgIHBsYXlhYmxlOiAncmdiKDEzLCAyMjIsIDE1NiknLFxuICAgIG90aGVyOiAncmdiKDIwMSwgMjA5LCAxNjEpJyxcbiAgfVxuXG4gIGxldCBib3JkZXJDb2xvclxuICAkOiBib3JkZXJDb2xvciA9IChcbiAgICBnYW1lLnRhZ3MuaW5jbHVkZXMoJ3BsYXlhYmxlJylcbiAgICAgID8gYm9yZGVyQ29sb3JzLnBsYXlhYmxlXG4gICAgOiBnYW1lLnRhZ3MuaW5jbHVkZXMoJ2NyYXNoJylcbiAgICAgID8gYm9yZGVyQ29sb3JzLmNyYXNoXG4gICAgOiBib3JkZXJDb2xvcnMub3RoZXJcbiAgKVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgLnNxdWFyZS1pbWFnZSB7XG4gICAgd2lkdGg6IDI1NnB4O1xuICAgIGhlaWdodDogMjU2cHg7XG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMnMgZWFzZS1vdXQ7XG4gIH1cblxuICAuc3F1YXJlLWltYWdlOmhvdmVyIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTc1KTtcbiAgfVxuXG4gIC5lbnRyeSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yKTtcbiAgICBwYWRkaW5nOiAxcmVtO1xuICAgIGJvcmRlci1yYWRpdXM6IDFyZW07XG5cbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cblxuICAuZW50cnktYmFja2dyb3VuZCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICB6LWluZGV4OiAtMTtcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xuICAgIGZpbHRlcjogYmx1cigxMHB4KSBicmlnaHRuZXNzKDUwJSk7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjk1KTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgfVxuXG4gIC5lbnRyeS1iYWNrZ3JvdW5kLWltYWdlIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbjwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9XCJlbnRyeVwiIHN0eWxlPXtgLS1ib3JkZXItY29sb3I6ICR7Ym9yZGVyQ29sb3J9YH0+XG4gIDxkaXYgY2xhc3M9XCJlbnRyeS1iYWNrZ3JvdW5kXCI+XG4gICAgPGltZyBjbGFzcz1cImVudHJ5LWJhY2tncm91bmQtaW1hZ2VcIiBzcmM9e2dhbWUuc3F1YXJlSW1hZ2V9IGFsdD1cIkdhbWUgQmFja2dyb3VuZFwiIHJlZmVycmVyUG9saWN5PVwibm8tcmVmZXJyZXJcIiAvPlxuICA8L2Rpdj5cblxuICA8YSBocmVmPXtnYW1lLnBlcm1hbGlua30+XG4gICAgPGltZyBjbGFzcz1cInNxdWFyZS1pbWFnZVwiIHNyYz17Z2FtZS5zcXVhcmVJbWFnZX0gYWx0PVwiR2FtZVwiIHJlZmVycmVyUG9saWN5PVwibm8tcmVmZXJyZXJcIiAvPlxuICA8L2E+XG5cbiAgPFRhZ3MgdGFncz17Z2FtZS50YWdzfSAvPlxuPC9kaXY+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJCQXNFYyxHQUFJLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQ0FQc0IsR0FBSSxJQUFDLFdBQVc7Ozs7Ozs7K0NBSTFCLEdBQUksSUFBQyxXQUFXOzs7OytDQUR4QyxHQUFJLElBQUMsU0FBUzs7O2lGQUxvQixHQUFXOzs7Ozs7Ozs7Ozs7Ozs7aUZBRVgsR0FBSSxJQUFDLFdBQVc7Ozs7aUZBSTFCLEdBQUksSUFBQyxXQUFXOzs7O21GQUR4QyxHQUFJLElBQUMsU0FBUzs7Ozs7d0RBSVgsR0FBSSxJQUFDLElBQUk7Ozs0SEFUc0IsR0FBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BMUQzQyxJQUFJOztPQUVULFlBQVk7RUFDaEIsS0FBSyxFQUFFLFFBQVE7RUFDZixRQUFRLEVBQUUsbUJBQW1CO0VBQzdCLEtBQUssRUFBRSxvQkFBb0I7OztLQUd6QixXQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FDZixDQUFDLGtCQUFFLFdBQVcsR0FDWixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVO0tBQ3pCLFlBQVksQ0FBQyxRQUFRO0tBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU87TUFDeEIsWUFBWSxDQUFDLEtBQUs7TUFDcEIsWUFBWSxDQUFDLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9

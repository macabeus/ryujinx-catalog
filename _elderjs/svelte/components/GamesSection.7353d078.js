import { n as noop, s as safe_not_equal, R as is_function, T as subscribe, U as run_all, J as create_component, k as space, e as element, K as claim_component, l as claim_space, c as claim_element, a as children, d as detach_dev, b as attr_dev, f as add_location, L as mount_component, i as insert_dev, q as transition_in, r as transition_out, M as destroy_component, h as dispatch_dev, v as validate_slots, V as validate_store, W as component_subscribe, X as setContext, Y as set_store_value, S as SvelteComponentDev, j as init } from '../index-96466d9a.js';
import { t as tagsFilter } from '../tagsFilter-23b6c8d4.js';
import GameList from './GameList.f1d03ab5.js';
import './Tag.4a56e822.js';
import Tags from './Tags.7fe25aaf.js';
import './GameTeaser.a00773f6.js';
import SearchGames from './SearchGames.cb64d968.js';

const subscriber_queue = [];
/**
 * Creates a `Readable` store that allows reading by subscription.
 * @param value initial value
 * @param {StartStopNotifier}start start and stop notifications for subscriptions
 */
function readable(value, start) {
    return {
        subscribe: writable(value, start).subscribe
    };
}
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}
function derived(stores, fn, initial_value) {
    const single = !Array.isArray(stores);
    const stores_array = single
        ? [stores]
        : stores;
    const auto = fn.length < 2;
    return readable(initial_value, (set) => {
        let inited = false;
        const values = [];
        let pending = 0;
        let cleanup = noop;
        const sync = () => {
            if (pending) {
                return;
            }
            cleanup();
            const result = fn(single ? values[0] : values, set);
            if (auto) {
                set(result);
            }
            else {
                cleanup = is_function(result) ? result : noop;
            }
        };
        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
            values[i] = value;
            pending &= ~(1 << i);
            if (inited) {
                sync();
            }
        }, () => {
            pending |= (1 << i);
        }));
        inited = true;
        sync();
        return function stop() {
            run_all(unsubscribers);
            cleanup();
        };
    });
}

/* src/components/GamesSection.svelte generated by Svelte v3.29.7 */
const file = "src/components/GamesSection.svelte";

function create_fragment(ctx) {
	let searchgames;
	let t0;
	let div0;
	let t1;
	let tags;
	let t2;
	let div1;
	let t3;
	let gamelist;
	let current;

	searchgames = new SearchGames({
			props: {
				allGames: /*allGames*/ ctx[0],
				tagsFilter: /*$tagsFilter*/ ctx[2]
			},
			$$inline: true
		});

	searchgames.$on("update", /*updateGameList*/ ctx[5]);

	tags = new Tags({
			props: { tags: [.../*allTags*/ ctx[3]] },
			$$inline: true
		});

	gamelist = new GameList({
			props: { games: /*gamesList*/ ctx[1] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(searchgames.$$.fragment);
			t0 = space();
			div0 = element("div");
			t1 = space();
			create_component(tags.$$.fragment);
			t2 = space();
			div1 = element("div");
			t3 = space();
			create_component(gamelist.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(searchgames.$$.fragment, nodes);
			t0 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true });
			children(div0).forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(tags.$$.fragment, nodes);
			t2 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			children(div1).forEach(detach_dev);
			t3 = claim_space(nodes);
			claim_component(gamelist.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "spacing-small svelte-1w0xbv1");
			add_location(div0, file, 57, 0, 1136);
			attr_dev(div1, "class", "spacing-large svelte-1w0xbv1");
			add_location(div1, file, 61, 0, 1197);
		},
		m: function mount(target, anchor) {
			mount_component(searchgames, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div0, anchor);
			insert_dev(target, t1, anchor);
			mount_component(tags, target, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, div1, anchor);
			insert_dev(target, t3, anchor);
			mount_component(gamelist, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const searchgames_changes = {};
			if (dirty & /*allGames*/ 1) searchgames_changes.allGames = /*allGames*/ ctx[0];
			if (dirty & /*$tagsFilter*/ 4) searchgames_changes.tagsFilter = /*$tagsFilter*/ ctx[2];
			searchgames.$set(searchgames_changes);
			const gamelist_changes = {};
			if (dirty & /*gamesList*/ 2) gamelist_changes.games = /*gamesList*/ ctx[1];
			gamelist.$set(gamelist_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(searchgames.$$.fragment, local);
			transition_in(tags.$$.fragment, local);
			transition_in(gamelist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(searchgames.$$.fragment, local);
			transition_out(tags.$$.fragment, local);
			transition_out(gamelist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(searchgames, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t1);
			destroy_component(tags, detaching);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t3);
			destroy_component(gamelist, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $tagsFilter;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("GamesSection", slots, []);
	let { allGames } = $$props;

	// List all tags
	const allTags = allGames.reduce(
		(acc, current) => {
			current.tags.forEach(tag => {
				acc.add(tag);
			});

			return acc;
		},
		new Set()
	);

	// Tags filter logic
	const tagsFilter$1 = writable([]);

	validate_store(tagsFilter$1, "tagsFilter");
	component_subscribe($$self, tagsFilter$1, value => $$invalidate(2, $tagsFilter = value));

	setContext(tagsFilter.key, {
		toggleTag: tag => {
			if ($tagsFilter.includes(tag)) {
				set_store_value(tagsFilter$1, $tagsFilter = $tagsFilter.filter(i => i !== tag), $tagsFilter);
				return;
			}

			set_store_value(tagsFilter$1, $tagsFilter = [...$tagsFilter, tag], $tagsFilter);
		}
	});

	// Game list logic
	let gamesList = allGames;

	const updateGameList = event => {
		$$invalidate(1, gamesList = event.detail);
	};

	const writable_props = ["allGames"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<GamesSection> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("allGames" in $$props) $$invalidate(0, allGames = $$props.allGames);
	};

	$$self.$capture_state = () => ({
		setContext,
		writable,
		key: tagsFilter.key,
		GameList,
		SearchGames,
		Tags,
		allGames,
		allTags,
		tagsFilter: tagsFilter$1,
		gamesList,
		updateGameList,
		$tagsFilter
	});

	$$self.$inject_state = $$props => {
		if ("allGames" in $$props) $$invalidate(0, allGames = $$props.allGames);
		if ("gamesList" in $$props) $$invalidate(1, gamesList = $$props.gamesList);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [allGames, gamesList, $tagsFilter, allTags, tagsFilter$1, updateGameList];
}

class GamesSection extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { allGames: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "GamesSection",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*allGames*/ ctx[0] === undefined && !("allGames" in props)) {
			console.warn("<GamesSection> was created without expected prop 'allGames'");
		}
	}

	get allGames() {
		throw new Error("<GamesSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set allGames(value) {
		throw new Error("<GamesSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default GamesSection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
